{"version":3,"sources":["../src/index.ts","../src/admin/filterSortManagement.tsx","../src/admin/saveCancelHeader.tsx","../src/admin/globalFormProvider.tsx","../src/admin/saveCancelHeader.module.css","../src/admin/paginationManager.tsx","../src/admin/masterTableProvider.tsx","../src/admin/recordBrowserProvider.tsx","../src/admin/autoQueryProvider.tsx","../src/admin/breadcrumbSet.tsx","../src/debug/DebugModeToggle.tsx"],"sourcesContent":["// Re-exports (only implemented files for now)\nexport * from \"./admin/filterSortManagement\";\nexport * from \"./admin/saveCancelHeader\";\nexport * from \"./admin/globalFormProvider\";\nexport * from \"./admin/paginationManager\";\nexport * from \"./admin/masterTableProvider\";\nexport * from \"./admin/recordBrowserProvider\";\nexport * from \"./admin/autoQueryProvider\";\nexport { default as BreadcrumbSet } from \"./admin/breadcrumbSet\";\nexport { DebugModeToggle } from \"./debug/DebugModeToggle\";\n","import { useState, useEffect } from \"react\";\nimport { Text, Badge } from \"@mantine/core\";\nimport { useDebouncedValue } from \"@mantine/hooks\";\n\nexport function useFilterSortManagement(initQueryValue: string, initialFilters: any[], initialSort: any, initialView: any = null, defaults: any = {}) {\n  const [appliedSort, setAppliedSort] = useState(initialSort || {});\n  const [appliedView, setAppliedView] = useState(initialView || \"\");\n  const [appliedFilters, setAppliedFilters] = useState(initialFilters?.map((f) => ({ ...f, label: disambiguateLabel(f.key, f.value) })) || []);\n  const [queryValue, setQueryValue] = useState(initQueryValue || \"\");\n  const [debouncedQueryValue] = useDebouncedValue(queryValue, 200, { leading: true });\n\n  const appliedOrDefaultSort = () => (appliedSort && Object.keys(appliedSort).length > 0 ? appliedSort : defaults.sort || {});\n\n  useEffect(() => {\n    setAppliedSort(initialSort);\n    setAppliedFilters(initialFilters?.map((f) => ({ ...f, label: disambiguateLabel(f.key, f.value) })));\n    setQueryValue(initQueryValue || \"\");\n  }, []);\n\n  const handleQueryChange = (value: string) => setQueryValue(value);\n  const handleSortChange = (value: any) => setAppliedSort((prev: any) => ({ ...appliedOrDefaultSort(), ...prev, ...value }));\n  const handleFilterChange = (key: string, value: any) =>\n    setAppliedFilters((prev) => {\n      const updated = prev.filter((f) => f.key !== key);\n      updated.push({ key, value, label: disambiguateLabel(key, value) });\n      return updated;\n    });\n  const handleMultiFilterToggle = (key: string, { value, checked }: any) =>\n    setAppliedFilters((prev) => {\n      const updated = prev.filter((f) => f.key !== key);\n      if (value && value.length > 0) {\n        const oldValues = prev.find((f) => key === f.key)?.value || [];\n        const newValues = checked ? [...oldValues, value] : oldValues.filter((s: any) => s !== value);\n        updated.push({ key, value: newValues, label: disambiguateLabel(key, newValues) });\n      }\n      return updated;\n    });\n  const handleClearFilter = (key: string) => setAppliedFilters((prev) => prev.filter((f) => f.key !== key));\n  const handleClearAllFilters = () => {\n    setQueryValue(\"\");\n    setAppliedFilters([]);\n  };\n  const handleSetView = (view: any) => {\n    if (view?.filters) {\n      setAppliedView(view.key);\n      setAppliedFilters(view.filters.map((f: any) => ({ ...f, label: disambiguateLabel(f.key, f.value) })));\n    } else {\n      setAppliedFilters([]);\n    }\n    setQueryValue(\"\");\n  };\n\n  return {\n    appliedSort,\n    appliedOrDefaultSort,\n    appliedFilters,\n    appliedView,\n    queryValue,\n    debouncedQueryValue,\n    handleSortChange,\n    handleFilterChange,\n    handleMultiFilterToggle,\n    handleClearFilter,\n    handleClearAllFilters,\n    handleQueryChange,\n    handleSetView,\n  };\n}\n\nfunction disambiguateLabel(key: string, value: any) {\n  switch (key) {\n    case \"prodState\":\n      return [\n        <Text inline span key=\"label\">\n          State is\n        </Text>,\n        Array.isArray(value)\n          ? value.map((val: any, i: number) => (\n              <Badge ml=\"xs\" size=\"sm\" radius=\"sm\" key={i}>\n                {String(val)}\n              </Badge>\n            ))\n          : String(value),\n      ];\n    default:\n      return String(value);\n  }\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport { useDebouncedCallback } from \"@mantine/hooks\";\nimport { useGlobalFormContext } from \"./globalFormProvider\";\nimport { Button, Group, Text, Paper } from \"@mantine/core\";\nimport { IconAlertSquareRounded } from \"@tabler/icons-react\";\nimport classes from \"./saveCancelHeader.module.css\";\n\nexport function SaveCancelHeader() {\n  const { isDirty, saveHandlerRef, cancelHandlerRef, registerBlockHandler } = useGlobalFormContext();\n  const [pulse, setPulse] = useState(false);\n\n  const closePulse = useDebouncedCallback(() => {\n    setPulse(false);\n  }, 500);\n\n  const blockHandler = useCallback(() => {\n    setPulse(true);\n    closePulse();\n  }, []);\n\n  useEffect(() => registerBlockHandler(blockHandler), [blockHandler]);\n  if (!isDirty) return null;\n\n  return (\n    <Paper className={pulse ? classes[\"shake-and-pulse\"] : undefined} w=\"100%\" radius=\"lg\" p={3} bg=\"gray.9\" bd=\"gray.6\" c=\"white\">\n      <Group justify=\"space-between\">\n        <Group ml=\"sm\">\n          <IconAlertSquareRounded />\n          <Text size=\"sm\">Unsaved Changes</Text>\n        </Group>\n        <Group mr=\"sm\">\n          <Button\n            size=\"xs\"\n            color=\"gray.8\"\n            radius=\"lg\"\n            disabled={!isDirty}\n            onClick={() => {\n              cancelHandlerRef.current?.();\n            }}\n          >\n            Discard\n          </Button>\n          <Button size=\"xs\" color=\"teal\" radius=\"lg\" disabled={!isDirty} onClick={saveHandlerRef.current ?? undefined}>\n            Save\n          </Button>\n        </Group>\n      </Group>\n    </Paper>\n  );\n}\n","import { useBlocker, useNavigate } from \"@remix-run/react\";\nimport { createContext, useContext, useState, useRef, useCallback, ReactNode, useMemo, useEffect } from \"react\";\n\nexport interface GlobalFormContextType {\n  isDirty: boolean;\n  markDirty: (isDirty: boolean) => void;\n  registerHandlers: (save: () => void, cancel: () => void) => void;\n  saveHandlerRef: React.MutableRefObject<(() => void) | null>;\n  cancelHandlerRef: React.MutableRefObject<(() => void) | null>;\n  setBlockHandler: React.Dispatch<React.SetStateAction<() => void>>;\n  blocker: ReturnType<typeof useBlocker>;\n  registerBlockHandler: (block: () => void) => void;\n  forceNavigate: (to: string) => void;\n}\n\nconst FormContext = createContext<GlobalFormContextType | null>(null);\n\ninterface GlobalFormProviderProps {\n  children: ReactNode;\n}\n\nexport function GlobalFormProvider({ children }: GlobalFormProviderProps) {\n  const [isDirty, setIsDirty] = useState(false);\n  const [blockHandler, setBlockHandler] = useState<() => void>(() => () => {});\n  const bypassBlockerRef = useRef(false);\n  const navigate = useNavigate();\n\n  const saveHandlerRef = useRef<(() => void) | null>(null);\n  const cancelHandlerRef = useRef<(() => void) | null>(null);\n\n  const blockerFunction = useCallback(\n    ({ currentLocation, nextLocation }: any) => {\n      const sanitizeSearch = (search: string) => search.replace(/[?&]/g, \"\").replace(\"index\", \"\");\n\n      const shouldBlock =\n        !bypassBlockerRef.current &&\n        isDirty &&\n        (currentLocation.pathname !== nextLocation.pathname || sanitizeSearch(currentLocation.search) !== sanitizeSearch(nextLocation.search));\n\n      if (shouldBlock) blockHandler();\n\n      return shouldBlock;\n    },\n    [isDirty, blockHandler],\n  );\n\n  const blocker = useBlocker(blockerFunction);\n\n  const markDirty = useCallback((dirty: boolean) => setIsDirty(dirty), []);\n\n  const forceNavigate = useCallback(\n    (to: string) => {\n      bypassBlockerRef.current = true;\n      navigate(to);\n      setTimeout(() => {\n        bypassBlockerRef.current = false;\n      }, 1000);\n    },\n    [navigate],\n  );\n\n  const registerHandlers = useCallback((save: () => void, cancel: () => void) => {\n    saveHandlerRef.current = save;\n    cancelHandlerRef.current = cancel;\n  }, []);\n\n  const registerBlockHandler = useCallback((block: () => void) => {\n    setBlockHandler(() => block);\n  }, []);\n\n  const value = useMemo<GlobalFormContextType>(\n    () => ({\n      isDirty,\n      markDirty,\n      registerHandlers,\n      saveHandlerRef,\n      cancelHandlerRef,\n      setBlockHandler,\n      blocker,\n      registerBlockHandler,\n      forceNavigate,\n    }),\n    [isDirty, markDirty, registerHandlers, blocker, registerBlockHandler, forceNavigate],\n  );\n\n  return <FormContext.Provider value={value}>{children}</FormContext.Provider>;\n}\n\nexport function useGlobalFormContext(): GlobalFormContextType {\n  const context = useContext(FormContext);\n  if (!context) throw new Error(\"useGlobalFormContext must be used within a GlobalFormProvider\");\n  return context;\n}\n\ninterface FormHandlers<T> {\n  handleSubmit: (onSubmit: (data: T) => void) => () => void;\n  reset: () => void;\n  formState: { isDirty: boolean };\n}\n\nexport function useInitGlobalFormContext<T>(formHandlers: FormHandlers<T>, onSubmit: (data: T) => void, onCancel: () => void) {\n  const { registerHandlers, markDirty, blocker, forceNavigate } = useGlobalFormContext();\n  useEffect(() => {\n    const cancelHandler =\n      !onCancel || (onCancel as any) === \"undefined\"\n        ? () => {\n            formHandlers.reset();\n          }\n        : onCancel;\n    registerHandlers(formHandlers.handleSubmit(onSubmit), cancelHandler);\n  }, [formHandlers, onSubmit, onCancel, registerHandlers]);\n\n  useEffect(() => {\n    markDirty(formHandlers.formState.isDirty);\n  }, [formHandlers.formState.isDirty, markDirty]);\n\n  return { blocker, forceNavigate };\n}\n","@keyframes shake {\n  0%,\n  100% {\n    transform: translateX(0);\n  }\n  15% {\n    transform: translateX(-5px);\n  }\n  30% {\n    transform: translateX(5px);\n  }\n  45% {\n    transform: translateX(-5px);\n  }\n  60% {\n    transform: translateX(5px);\n  }\n  75% {\n    transform: translateX(-5px);\n  }\n  90% {\n    transform: translateX(5px);\n  }\n}\n\n@keyframes pulseGreen {\n  0% {\n    background-color: var(--mantine-color-teal-6);\n    opacity: 1;\n  }\n  100% {\n    background-color: transparent;\n  }\n}\n\n.shake-and-pulse {\n  background-color: green;\n  animation:\n    shake 0.5s ease,\n    pulseGreen 1s ease-in-out;\n}\n","import { useState } from \"react\";\n\nexport function usePaginationManager(initPageNumber: number, initTotalRecords: number) {\n  const [pageNumber, setPageNumber] = useState<number>(initPageNumber);\n  const [totalRecords, setTotalRecords] = useState<number>(initTotalRecords);\n\n  const resetToFirstPage = () => setPageNumber(1);\n  const handlePageNumberChange = (page: number) => setPageNumber(page);\n\n  return { pageNumber, handlePageNumberChange, totalRecords, resetToFirstPage, setTotalRecords } as const;\n}\n","import { createContext, useContext, ReactNode } from \"react\";\n\ninterface MasterTableContextType<T = any> {\n  records: T[];\n}\nconst MasterTableContext = createContext<MasterTableContextType | null>(null);\n\nexport function MasterTableProvider<T = any>({ children, initialRecords }: { children: ReactNode; initialRecords: T[] }) {\n  return <MasterTableContext.Provider value={{ records: initialRecords }}>{children}</MasterTableContext.Provider>;\n}\n\nexport function useMasterTable<T = any>() {\n  const context = useContext(MasterTableContext) as MasterTableContextType<T> | null;\n  if (!context) throw new Error(\"useMasterTable must be used within a MasterTableProvider\");\n  return context;\n}\n","import { useNavigate } from \"@remix-run/react\";\nimport { ActionIcon, Group } from \"@mantine/core\";\nimport { IconChevronLeft, IconChevronRight } from \"@tabler/icons-react\";\nimport React, { createContext, useState, useContext, useCallback, useMemo, ReactNode } from \"react\";\n\ninterface RecordBrowserContextType<T = any> {\n  records: T[];\n  updateRecords: (recs: T[]) => void;\n}\nconst RecordBrowserContext = createContext<RecordBrowserContextType | null>(null);\n\nexport function RecordBrowserProvider<T = any>({ children, initialRecords = [] as T[] }: { children: ReactNode; initialRecords?: T[] }) {\n  const [records, setRecords] = useState<T[]>(initialRecords);\n  const updateRecords = useCallback((newRecords: T[]) => setRecords(newRecords), []);\n  const value = useMemo(() => ({ records, updateRecords }), [records, updateRecords]);\n  return <RecordBrowserContext.Provider value={value}>{children}</RecordBrowserContext.Provider>;\n}\n\nexport function useRecordBrowserContext<T = any>({ optional = false }: { optional?: boolean } = {}) {\n  const ctx = useContext(RecordBrowserContext) as RecordBrowserContextType<T> | null;\n  if (!ctx && !optional) throw new Error(\"useRecordBrowserContext must be used within a RecordBrowserProvider\");\n  return ctx;\n}\n\nexport function useRecordBrowser<T = any>(currentId: any, masterRecords: T[] | null = null) {\n  const navigate = useNavigate();\n  const context = useRecordBrowserContext<T>({ optional: true });\n  const records = masterRecords ?? context?.records ?? [];\n  const currentIndex = records.findIndex((record: any) => (record as any).id === currentId);\n\n  const nextRecord = () => {\n    if (currentIndex < (records as any).length - 1) navigate(`../${(records as any)[currentIndex + 1].id}/${location.search}`, { relative: \"path\" });\n  };\n  const prevRecord = () => {\n    if (currentIndex > 0) navigate(`../${(records as any)[currentIndex - 1].id}/${location.search}`, { relative: \"path\" });\n  };\n\n  return { currentIndex, numRecords: (records as any).length, nextRecord, prevRecord } as const;\n}\n\nexport function RecordNavButtons({ recordBrowser }: { recordBrowser: ReturnType<typeof useRecordBrowser> }) {\n  return (\n    <Group>\n      <ActionIcon onClick={recordBrowser.prevRecord} variant=\"outline\" disabled={recordBrowser.currentIndex === 0}>\n        <IconChevronLeft />\n      </ActionIcon>\n      <ActionIcon onClick={recordBrowser.nextRecord} variant=\"outline\" disabled={recordBrowser.currentIndex === recordBrowser.numRecords - 1}>\n        <IconChevronRight />\n      </ActionIcon>\n    </Group>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useSubmit } from \"@remix-run/react\";\n\n// tiny utilities\nconst isEmpty = (val: any) => val === undefined || val === null || String(val).trim() === \"\";\nconst notEqual = (a: any, b: any) => {\n  try {\n    return JSON.stringify(a) !== JSON.stringify(b);\n  } catch {\n    return a !== b;\n  }\n};\n\nexport function useAutoQuery(filterSortManager: any, paginationManager: any, defaultValues: any) {\n  const submit = useSubmit();\n  const { pageNumber, resetToFirstPage } = paginationManager;\n  const [lastPageNumber, setLastPageNumber] = useState(defaultValues?.pageNumber || 1);\n  const [lastQuery, setLastQuery] = useState(defaultValues?.queryValue || \"\");\n  const { filters: initialFilters, sort: initialSort } = defaultValues || {};\n  const { appliedFilters, appliedSort, appliedView, debouncedQueryValue } = filterSortManager;\n\n  useEffect(() => {\n    if (\n      notEqual(appliedFilters, initialFilters) ||\n      notEqual(appliedSort, initialSort) ||\n      notEqual(lastQuery, debouncedQueryValue) ||\n      notEqual(pageNumber, lastPageNumber)\n    ) {\n      if (lastPageNumber != pageNumber) setLastPageNumber(pageNumber);\n      let activePage = pageNumber;\n      if (lastQuery !== debouncedQueryValue) {\n        activePage = 1;\n        resetToFirstPage();\n        setLastQuery(debouncedQueryValue);\n      }\n      submitQuery(activePage, debouncedQueryValue, appliedFilters, appliedSort, appliedView);\n    }\n  }, [pageNumber, appliedFilters, appliedSort, debouncedQueryValue]);\n\n  const submitQuery = (pageNumber: number, query: string, filters: any[], sort: any, view: any) => {\n    const params: Record<string, string | number> = { pageNumber };\n    if (!isEmpty(query)) params.query = query;\n    filters?.forEach((filter) => {\n      (params as any)[filter.key] = String(filter.value);\n    });\n    if (sort) {\n      if (sort.key) (params as any).sort = sort.key;\n      if (sort.direction) (params as any).sortDirection = sort.direction;\n    }\n    if (view) (params as any).view = view;\n    submit(params as any, { method: \"get\" });\n  };\n}\n","import { Link, useLocation } from \"@remix-run/react\";\nimport { Breadcrumbs, Anchor, Text } from \"@mantine/core\";\nimport type { ReactNode } from \"react\";\n\nexport type BreadcrumbItem = { label?: ReactNode; title?: string; href: string };\nexport default function BreadcrumbSet({ breadcrumbs }: { breadcrumbs: BreadcrumbItem[] }) {\n  if (!breadcrumbs) return null;\n  const location = useLocation();\n  const renderBreadcrumb = (breadcrumb: BreadcrumbItem) => {\n    const label: ReactNode = breadcrumb.label ?? breadcrumb.title ?? \"\";\n    const isLink = breadcrumb.href !== \"#\";\n    return isLink ? (\n      <Anchor component={Link} to={`${breadcrumb.href}${location.search}`} key={breadcrumb.href}>\n        {label}\n      </Anchor>\n    ) : (\n      <Text size=\"xl\" fw=\"bold\" key={breadcrumb.href}>\n        {label}\n      </Text>\n    );\n  };\n  return <Breadcrumbs separatorMargin=\"sm\">{breadcrumbs.map((b) => renderBreadcrumb(b))}</Breadcrumbs>;\n}\n","import { Switch, Tooltip, Group } from \"@mantine/core\";\nimport { IconBug } from \"@tabler/icons-react\";\nimport { useFetcher } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\n\ninterface DebugModeToggleProps {\n  initialValue?: boolean;\n}\nexport function DebugModeToggle({ initialValue = false }: DebugModeToggleProps) {\n  const fetcher = useFetcher<{ debugMode: boolean }>();\n  const [checked, setChecked] = useState(initialValue);\n  useEffect(() => {\n    if (fetcher.data) setChecked(fetcher.data.debugMode);\n  }, [fetcher.data]);\n  return (\n    <fetcher.Form method=\"post\" action=\"/api/toggle-debug\">\n      <Tooltip label={checked ? \"Debug Mode: ON\" : \"Debug Mode: OFF\"} position=\"bottom\">\n        <Group gap=\"xs\">\n          <Switch\n            color=\"gray.7\"\n            size=\"xs\"\n            checked={checked}\n            onChange={(e) => {\n              setChecked(e.currentTarget.checked);\n              fetcher.submit({}, { method: \"POST\", action: \"/api/toggle-debug\" });\n            }}\n            onLabel={<IconBug size=\"1rem\" color=\"red\" />}\n            offLabel={<IconBug size=\"1rem\" color=\"gray\" />}\n          />\n        </Group>\n      </Tooltip>\n    </fetcher.Form>\n  );\n}\n"],"mappings":"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","names":["import_react","import_hooks","import_react","import_jsx_runtime","import_core","import_jsx_runtime","import_react","import_react","import_jsx_runtime","import_react","import_core","import_icons_react","import_jsx_runtime","import_react","pageNumber","import_react","import_core","import_jsx_runtime","location","import_core","import_icons_react","import_react","import_jsx_runtime"]}